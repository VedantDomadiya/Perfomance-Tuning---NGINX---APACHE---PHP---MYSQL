#########################################################################
# NGINX GLOBAL CONFIGURATION - Optimized for EC2 t2.micro (1 vCPU, 1GB RAM)
# Priorities: Stability, Security (CIS), then Performance.
#########################################################################

# -----------------
# CORE PROCESS SETTINGS
# -----------------
user www-data;
# CRITICAL T2.MICRO SETTING: 1 vCPU = 1 worker for max efficiency/stability.
worker_processes 1; 

pid /run/nginx.pid;
# Recommended: Only log critical errors to reduce I/O.
error_log /var/log/nginx/error.log crit;
include /etc/nginx/modules-enabled/*.conf;

# CRITICAL T2.MICRO SETTING: Reduced from 100k to a safe, high limit.
worker_rlimit_nofile 2048; 


# -----------------
# EVENTS (CONNECTION) SETTINGS
# -----------------
events {
    # CRITICAL T2.MICRO SETTING: Max connections per worker (total = 1 * 1024).
    worker_connections 1024;
    
    # CRITICAL T2.MICRO SETTING: Disabled for stability on low-CPU instances.
    multi_accept off;
    
    # Linux-specific event model (best performance)
    use epoll;
}


# -----------------
# HTTP GLOBAL BLOCK
# -----------------
http {
    # CIS REQUIREMENT: Hide NGINX version for security
    server_tokens off; 
    
    # Reduced max size to save RAM allocated for cache zone.
    open_file_cache max=5000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # Logging and I/O
    # access_log off; # NOTE: Keeping this commented out for troubleshooting, logging is BELOW

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;

    types_hash_max_size 2048;
    
    # -----------------
    # SSL/TLS SETTINGS (CIS COMPLIANT)
    # -----------------
    # CIS REQUIREMENT: Drop insecure protocols (TLSv1, TLSv1.1)
    ssl_protocols TLSv1.2 TLSv1.3; 
    
    # CIS REQUIREMENT: Prefer server-side ciphers
    ssl_prefer_server_ciphers on;

    # Maintaining SSL Sessions (Reduced to 5m for RAM safety)
    ssl_session_cache shared:NGX_SSL_CACHE:5m; 
    ssl_session_timeout 4h;
    ssl_session_tickets off;
    ssl_buffer_size 1400;

    # OCSP Stapling (Good security/performance practice)
    ssl_stapling on;
    ssl_stapling_verify on;

    # Public, fast, reliable DNS resolvers for OCSP
    resolver 1.1.1.1 8.8.8.8 valid=300s;
    resolver_timeout 5s;


    # -----------------
    # LOGGING
    # -----------------
    # Re-enabled access logging as per CIS standard for auditing
    access_log /var/log/nginx/access.log;


    # -----------------
    # GZIP COMPRESSION (Minimal CPU Impact)
    # -----------------
    gzip on;
    # Reduced complexity is faster on low CPU:
    gzip_comp_level 1; 
    gzip_min_length 10240; 
    gzip_vary on;
    gzip_disable msie6;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types
            text/css
            text/javascript
            text/xml
            text/plain
            text/x-component
            application/javascript
            application/x-javascript
            application/json
            application/xml
            application/rss+xml
            application/atom+xml
            font/truetype
            font/opentype
            application/vnd.ms-fontobject
            image/svg+xml;

    
    # -----------------
    # BUFFERS AND TIMEOUTS (DOS Mitigation & RAM Control)
    # -----------------
    # CIS/DOS Mitigation: Fast timeouts to free up resources from slow clients
    client_body_timeout 10s; 
    client_header_timeout 10s;
    send_timeout 10s;
    
    # Max size for request body (e.g., small file uploads). Adjust if needed.
    client_max_body_size 1m; 
    
    # CRITICAL T2.MICRO SETTING: Reduced size for low-memory footprint
    client_body_buffer_size 16k; 

    # CRITICAL T2.MICRO SETTING: Reduced size to save RAM allocated per request
    large_client_header_buffers 4 8k;
    
    reset_timedout_connection on;
    
    # Keepalives
    keepalive_timeout 30;
    # High enough to be efficient, lower than 100k to save on connection bookkeeping
    keepalive_requests 10000; 

    # -----------------
    # RATE LIMITING (DOS Mitigation - Ensure these zones are defined once)
    # -----------------
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    limit_req_zone $binary_remote_addr zone=req_limit_per_ip:10m rate=5r/s;

    # DEFAULT SERVER BLOCK (Apply rate limits to all connections)
    server {
        # ... Other necessary server directives (e.g., listening on port 80/443)
        listen 80 default_server;
        
        # Limit total connections per IP to 10
        limit_conn conn_limit_per_ip 10;
        
        # Limit requests to 5r/s, burst up to 10
        limit_req zone=req_limit_per_ip burst=10 nodelay; 
    }

    # -----------------
    # VIRTUAL HOSTS
    # -----------------
    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;
}
