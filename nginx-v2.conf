#########################################################################
# NGINX PRODUCTION PERFORMANCE CONFIGURATION (Assuming Multi-Core, High RAM)
# Focus: Max Throughput, Low Latency, High Efficiency
#########################################################################

# -----------------
# CORE PROCESS SETTINGS
# -----------------
user www-data;
# Set worker processes to utilize all CPU cores for maximum concurrency.
worker_processes auto;
pid /run/nginx/nginx.pid;

# Set high limit for file descriptors (requires OS-level tuning via ulimit)
worker_rlimit_nofile 65535; 
# Log only critical errors to minimize disk I/O overhead
error_log /var/log/nginx/error.log crit;

# -----------------
# EVENTS (CONNECTION) SETTINGS
# -----------------
events {
    # Max connections per worker (total = cores * 8192)
    worker_connections 8192; 
    # Use the best event notification system for Linux
    use epoll;
    # multi_accept off is the modern default and is often more stable.
    multi_accept off; 
}


# -----------------
# HTTP GLOBAL BLOCK
# -----------------
http {
    # SECURITY: Hide version number
    server_tokens off; 
    
    # -----------------
    # CACHING AND I/O OPTIMIZATION
    # -----------------
    # Efficient file delivery via kernel: must-have for speed
    sendfile on;
    # Optimization to send headers and file parts efficiently
    tcp_nopush on; 
    tcp_nodelay on;

    # High file cache settings to store frequently accessed file metadata/descriptors
    open_file_cache max=100000 inactive=60s; 
    open_file_cache_valid 90s;
    open_file_cache_min_uses 1;
    open_file_cache_errors on;
    
    # MIME type efficiency
    types_hash_max_size 4096;
    
    # -----------------
    # BUFFERS AND TIMEOUTS
    # -----------------
    # Faster timeouts reduce connection backlog
    client_body_timeout 15s;
    client_header_timeout 15s;
    send_timeout 10s;
    
    # Default buffer sizes for average loads
    client_body_buffer_size 16k;
    large_client_header_buffers 4 32k;
    
    # Keepalive settings for persistent client connections (saves connection overhead)
    keepalive_timeout 75s;
    keepalive_requests 10000;
    
    # -----------------
    # GZIP COMPRESSION (Optimized for speed/CPU tradeoff)
    # -----------------
    gzip on;
    # Higher compression level uses more CPU but saves bandwidth. 
    # Level 6 is a good performance/size balance.
    gzip_comp_level 6; 
    gzip_min_length 256; 
    gzip_vary on;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types 
        text/css 
        application/javascript 
        application/json 
        application/xml 
        text/xml 
        text/plain 
        text/javascript;
    
    # -----------------
    # SSL/TLS SETTINGS (CIS Compliant + Performance)
    # -----------------
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;

    # High cache size for fast SSL session resumption
    ssl_session_cache shared:SSL:50m; 
    ssl_session_timeout 1d;
    ssl_session_tickets off;

    # Recommended ciphers for modern security and speed
    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256';

    # OCSP Stapling enabled for fast certificate validation
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 1.1.1.1 8.8.8.8 valid=300s;
    resolver_timeout 5s;

    # -----------------
    # LOGGING & INCLUDES
    # -----------------
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;

    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;
    
    # -----------------
    # ADVANCED SECURITY/RATE LIMITING
    # -----------------
    # Defined zones for DOS mitigation (apply in server/location blocks)
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    limit_req_zone $binary_remote_addr zone=req_limit_per_ip:10m rate=10r/s;
}
